# Required GitHub Secrets:
# Docker Registry Access:
# - DOCKER_USERNAME: Docker registry username
# - GH_ACCESS_TOKEN: GitHub access token for container registry
#
# Remote Server Access:
# - REMOTE_VM_HOST: Remote server hostname/IP
# - REMOTE_VM_USER: Remote server SSH username
# - REMOTE_SSH_KEY: SSH private key for remote server access
#
# Application Configuration:
# - APP_NAME: Application name
# - APP_VERSION: Application version
# - APP_PORT: Application port number
# - APP_URL: Base API URL path
# - APP_ITEMS_URL: Items endpoint path
# - APP_MYITEMS_URL: MyItems endpoint path
# - APP_AI_URL: AI endpoint path
# - APP_EVENT_URL: Events endpoint path
# - APP_QUERY_URL: Query endpoint path
# - APP_IMAGES_URL: Images endpoint path
# - APP_IP_URL: IP endpoint path
# - APP_ITEM_URL: Item endpoint path
#
# MongoDB Configuration:
# - MONGODB_UID: MongoDB username
# - MONGODB_PWD: MongoDB password
# - MONGODB_CLUSTER: MongoDB cluster name
# - MONGODB_COLLECTION_NAME: MongoDB collection name
#
# External Services:
# - OLLAMA_API_URL: Ollama API endpoint URL
# - IPSTACK_API_KEY: IPStack API key
#
# Storage Configuration:
# - S3_ENDPOINT: S3 storage endpoint
# - S3_BUCKETNAME: S3 bucket name
# - S3_ACCESS_KEY: S3 access key
# - S3_SECRET_ACCESS_KEY: S3 secret access key
# - S3_CLIENT_ENDPOINT: S3 client endpoint

name: Build, Push and Deploy Container Image

on:
  push:
    branches:
      - main # Trigger on main branch push, modify as needed

env:
  # Container Configuration
  CONTAINER_NAME: msj-local-api
  IMAGE_NAME: msj-local-api
  REGISTRY_URL: ghcr.io
  IMAGE_TAG: latest
  HOST_PORT: 8088          # Port on the host machine
  CONTAINER_PORT: 8080     # Port exposed by the container

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      # Push Docker image to GitHub Packages
      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      # Set up SSH key with verbose output
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "Setting up SSH key..."
          echo "${{ secrets.REMOTE_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval $(ssh-agent -s)
          echo "Adding key to agent..."
          ssh-add -v ~/.ssh/deploy_key
          echo "Key added to agent"
          
      # Test SSH connection with verbose output
      - name: Test connection
        run: |
          echo "Testing SSH connection..."
          echo "User: ${{ secrets.REMOTE_VM_USER }}"
          echo "Host: ${{ secrets.REMOTE_VM_HOST }}"
          if [ -z "${{ secrets.REMOTE_VM_USER }}" ] || [ -z "${{ secrets.REMOTE_VM_HOST }}" ]; then
            echo "Error: REMOTE_VM_USER or REMOTE_VM_HOST is empty"
            exit 1
          fi
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "${{ secrets.REMOTE_VM_USER }}@${{ secrets.REMOTE_VM_HOST }}" "echo Connection successful"

      # Deploy if connection test succeeds
      - name: Deploy
        if: success()
        run: |
          echo "Starting deployment..."
          # Create deployment script
          echo '#!/bin/bash
            echo "Removing existing container..."
            docker rm -f ${{ env.CONTAINER_NAME }} || true
            
            echo "Removing old image..."
            docker images ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -q | xargs -r docker rmi -f
            
            echo "Pulling new image..."
            docker pull ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
            echo "Starting new container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
              -e APP_NAME="${{ secrets.APP_NAME }}" \
              -e APP_VERSION="${{ secrets.APP_VERSION }}" \
              -e APP_PORT="${{ secrets.APP_PORT }}" \
              -e APP_URL="${{ secrets.APP_URL }}" \
              -e APP_ITEMS_URL="${{ secrets.APP_ITEMS_URL }}" \
              -e APP_MYITEMS_URL="${{ secrets.APP_MYITEMS_URL }}" \
              -e APP_AI_URL="${{ secrets.APP_AI_URL }}" \
              -e APP_EVENT_URL="${{ secrets.APP_EVENT_URL }}" \
              -e APP_QUERY_URL="${{ secrets.APP_QUERY_URL }}" \
              -e APP_IMAGES_URL="${{ secrets.APP_IMAGES_URL }}" \
              -e APP_IP_URL="${{ secrets.APP_IP_URL }}" \
              -e APP_ITEM_URL="${{ secrets.APP_ITEM_URL }}" \
              -e MONGODB_UID="${{ secrets.MONGODB_UID }}" \
              -e MONGODB_PWD="${{ secrets.MONGODB_PWD }}" \
              -e MONGODB_CLUSTER="${{ secrets.MONGODB_CLUSTER }}" \
              -e MONGODB_COLLECTION_NAME="${{ secrets.MONGODB_COLLECTION_NAME }}" \
              -e OLLAMA_API_URL="${{ secrets.OLLAMA_API_URL }}" \
              -e IPSTACK_API_KEY="${{ secrets.IPSTACK_API_KEY }}" \
              -e S3_ENDPOINT="${{ secrets.S3_ENDPOINT }}" \
              -e S3_BUCKETNAME="${{ secrets.S3_BUCKETNAME }}" \
              -e S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}" \
              -e S3_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}" \
              -e S3_CLIENT_ENDPOINT="${{ secrets.S3_CLIENT_ENDPOINT }}" \
              ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
            echo "Deployment complete"' > deploy.sh

          # Make script executable and run it via SSH
          chmod +x deploy.sh
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key deploy.sh "${{ secrets.REMOTE_VM_USER }}@${{ secrets.REMOTE_VM_HOST }}:~/"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "${{ secrets.REMOTE_VM_USER }}@${{ secrets.REMOTE_VM_HOST }}" "bash ~/deploy.sh"
